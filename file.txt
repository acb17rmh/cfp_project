---
description: |
    API documentation for modules: cfp_classifier.

lang: en

classoption: oneside
geometry: margin=1in
papersize: a4

linkcolor: blue
links-as-notes: true
...


    
# Module `cfp_classifier` {#cfp_classifier}







    
## Functions


    
### Function `preprocess_text` {#cfp_classifier.preprocess_text}



    
> `def preprocess_text(text)`


Function to preprocess input texts before being vectorized. Performs tokenisation and stopword removal,
and removes punctuation from the text.


###### Args

**`text`**
:   the input text to be preprocessed



###### Returns

**`list`**
:   a list of words in the text




    
## Classes


    
### Class `CFPClassifier` {#cfp_classifier.CFPClassifier}



> `class CFPClassifier(corpus, dump_model=False, model_name='trained_model.pkl', vectorizer_name='vectorizer.pkl')`











    
#### Methods


    
##### Method `classify_text` {#cfp_classifier.CFPClassifier.classify_text}



    
> `def classify_text(self, input_text_list)`


Function to classify a set of input sets.

###### Args

**`input_text_list`**
:   a list of strings to be classified.



###### Returns

**`list`**
:   a list of predicted labels corresponding to the input list's elements.



    
##### Method `evaluate` {#cfp_classifier.CFPClassifier.evaluate}



    
> `def evaluate(self, model_path=None, vectorizer_path=None)`


Function to run the trained classifier on the test set of data and evaluate its performance.
Also exports the results of the evaluation to an HTML document, which is saved in the /results subfolder.


    
##### Method `load_data` {#cfp_classifier.CFPClassifier.load_data}



    
> `def load_data(self, data, test_size=0.3)`


Function to load a labelled dataset from a CSV file, and split it into a training set and a testing set.


###### Args

**`data`**
:   the CSV file to be loaded


**`test_size`**
:   If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
           If int, represents the absolute number of test samples.
           If None, the value is set to the complement of the train size.
           If train_size is also None, it will be set to 0.25.



###### Returns

(DataFrame, DataFrame): a tuple of Pandas DataFrames, where the first DataFrame is the training data,
                        and the second DataFrame is the training data.


    
##### Method `train_classifier` {#cfp_classifier.CFPClassifier.train_classifier}



    
> `def train_classifier(self, dump_model=False, model_name='trained_model.sav', vectorizer_name='vectorizer.sav')`


Function to train the classifier on the data provided.

###### Returns

**`MultinomialNB`**
:   a trained instance of an sklearn MultinomialNB object.



    
##### Method `vectorize` {#cfp_classifier.CFPClassifier.vectorize}



    
> `def vectorize(self)`


Function to train the classifier on the data provided.

###### Returns

(sparse matrix, sparse matrix): a tuple of sparse matrices, where the first matrix is the document-term
                                matrix for the training data, and the second matrix is the document-term
                                matrix for the testing data.



-----
Generated by *pdoc* 0.7.5 (<https://pdoc3.github.io>).
